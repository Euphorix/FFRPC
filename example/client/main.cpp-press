#include <stdio.h>
#include "base/daemon_tool.h"
#include "base/arg_helper.h"
#include "base/strtool.h"
#include "base/smart_ptr.h"

#include "rpc/ffrpc.h"
#include "rpc/ffbroker.h"
#include "base/log.h"
#include "base/signal_helper.h"

using namespace ff;
#define FFRPC "FFRPC"

struct session_data_t
{
    session_data_t(int i):index(i){}
    int index;
};
class handler_t:public msg_handler_i
{
public:
    //! 处理连接断开
    int handle_broken(socket_ptr_t sock_)
    {
        if (NULL == sock_->get_data<session_data_t>())
        {
            sock_->safe_delete();
            return 0;
        }
        socket_info[sock_->get_data<session_data_t>()->index] = NULL;
        printf("handle_broken xxxxxxxx=%d\n", sock_->get_data<session_data_t>()->index);
        delete sock_->get_data<session_data_t>();
        sock_->safe_delete();
        
        return 0;
    }
    //! 处理消息
    int handle_msg(const message_t& msg_, socket_ptr_t sock_)
    {
        printf("handle_msg xxxxxxxxTTTT=%s\n", msg_.get_body().c_str());
        
        return 0;
    }
    
    map<int, socket_ptr_t> socket_info;
};
int main(int argc, char* argv[])
{
    //! 美丽的日志组件，shell输出是彩色滴！！
    LOG.start("-log_path ./log -log_filename log -log_class XX,BROKER,FFRPC -log_print_screen true -log_print_file false -log_level 6");

    if (argc == 1)
    {
        printf("usage: %s -gate tcp://127.0.0.1:10241\n", argv[0]);
        return 1;
    }
    string name ="helloworld";
    arg_helper_t arg_helper(argc, argv);
    if (false == arg_helper.is_enable_option("-gate"))
    {
        printf("usage: %s -gate tcp://127.0.0.1:10241\n", argv[0]);
        return 1;
    }
    if (arg_helper.is_enable_option("-name"))
    {
        name = arg_helper.get_option_value("-name");
    }
    printf("name=%s\n", name.c_str());
    handler_t handler;
    string host_ = arg_helper.get_option_value("-gate");
    
    int num = 1;
    if (arg_helper.is_enable_option("-num"))
    {
        num = atoi(arg_helper.get_option_value("-num").c_str());
    }
    socket_ptr_t sock = NULL;
    for (int i =0; i < num; ++i)
    {
        sock = net_factory_t::connect(host_, &handler);
        if (NULL == sock)
        {
            LOGERROR((FFRPC, "can't connect to remote broker<%s>", host_.c_str()));
            return -1;
        }
        sock->set_data(new session_data_t(i));
        handler.socket_info[i] = sock;
        msg_sender_t::send(sock, 0, name);
    }
/*
    while(1)
    {
        sleep(1);
        for (map<int, socket_ptr_t>::iterator it = handler.socket_info.begin(); it != handler.socket_info.end(); ++it)
        {
            if (it->second == NULL)
            {
                socket_ptr_t sock = net_factory_t::connect(host_, &handler);
                if (NULL == sock)
                {
                    LOGERROR((FFRPC, "can't connect to remote broker<%s>", host_.c_str()));
                    continue;
                }
                sock->set_data(new session_data_t(it->first));
                it->second = sock;
            }
            msg_sender_t::send(it->second, 2, "[1,2,3]");
        }
    }
*/
    //
    int cmd = 1;
    while(cmd)
    {
        cin >> cmd;
        msg_sender_t::send(sock, cmd, "[1,2,3]");
    }
    sleep(100);
    return 0;
}
